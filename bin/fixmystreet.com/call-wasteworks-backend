#!/usr/bin/env perl

# call-wasteworks-backend
# Call the Echo or Bartec API in parallel

use v5.14;
use warnings;

BEGIN {
    use File::Basename qw(dirname);
    use File::Spec;
    my $d = dirname(File::Spec->rel2abs($0));
    require "$d/../../setenv.pl";
}

use Getopt::Long::Descriptive;
use JSON::MaybeXS;
use Storable qw(store_fd);
use Fcntl qw(:flock);
use Integrations::Echo;
use Integrations::Bartec;
use Integrations::Whitespace;
use FixMyStreet;

my $integration_classes = {
    echo => 'Integrations::Echo',
    bartec => 'Integrations::Bartec',
    whitespace => 'Integrations::Whitespace',
};

my ($opts, $usage) = describe_options(
    '%c %o',
    ['cobrand=s', 'which cobrand configuration to use'],
    ['backend=s', 'which backend type (' . join('|', sort keys %$integration_classes) . ')'],
    ['out=s', 'where to output data'],
    ['calls=s', 'JSON of what API calls to make'],
    ['help|h', "print usage message and exit" ],
);
$usage->die if $opts->help;
$usage->die unless $opts->cobrand && $opts->calls && $opts->backend;

# Doing it this way, rather than creating the cobrand object and calling
# feature() is much quicker for a command line script
my $features = FixMyStreet->config('COBRAND_FEATURES');
my $cfg = $features->{$opts->backend}->{$opts->cobrand};

my $class = $integration_classes->{$opts->backend};
my $integration = $class->new(%$cfg);

my $fd;
if ($opts->out) {
    open($fd, ">", $opts->out) or die;
    flock($fd, LOCK_EX | LOCK_NB) or die;
}

use UUID::Tiny;
my $c = $opts->calls;
$c =~ s/UUID/'"' . UUID::Tiny::create_uuid_as_string . '"'/e;
my $calls = decode_json($c);
$calls = $integration->_parallel_api_calls(@$calls);
if ($fd) {
    store_fd($calls, $fd);
    flock($fd, LOCK_UN);
    close($fd);
} else {
    print encode_json($calls);
}
